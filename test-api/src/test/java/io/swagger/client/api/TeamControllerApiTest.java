/*
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.model.TeamDTO;
import io.swagger.client.model.TeamMemberDTO;
import io.swagger.client.model.UserDTO;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.fail;

import java.util.List;
import java.util.logging.Logger;
import java.util.stream.Collectors;

/**
 * API tests for TeamControllerApi
 */
public class TeamControllerApiTest {

    static final Logger logger = Logger.getLogger(TeamControllerApiTest.class.getName());

    private final ApiClient apiClient = new ApiClient();
    private final TeamControllerApi api = new TeamControllerApi(apiClient);
    private final ApiTestingTools apiTestingTools = new ApiTestingTools(apiClient);

    @AfterEach
    public void tearDown() throws Exception {
        apiTestingTools.logout();
    }

    
    @Test
    public void testApplyInATeam_Nominal() throws Exception {

        apiTestingTools.login("jdupont", "jdupont");

        Integer idTeam = 1;
        Integer idUser = 1;
        UserDTO response = null;
        TeamDTO team = null;
        try {
            response = api.applyInATeamUsingPUT(idTeam, idUser);
            team = api.getTeamByIdUsingGET(idTeam);
        } catch (ApiException e) {
            fail("API Exception :" + e.getCode());
        }

        assertEquals(1, response.getId());
        assertEquals("TEAM_MEMBER_ROLE", response.getRoles().get(0).getRole());
        List<UserDTO> users = team.getTeamMembers().stream().map(teamMember -> teamMember.getUser()).collect(Collectors.toList());
        assertTrue(users.contains(response));
    }
    

    @Test
    public void testCreateTeams_Nominal() throws Exception {
        Integer nbTeams = null;
        List<TeamDTO> response = api.createTeamsUsingPUT(nbTeams);

        // TODO: test validations
    }

    @Test
    public void testGetAllTeamMembersOfTeamById_Nominal() throws Exception {
        Integer idTeam = null;
        List<TeamMemberDTO> response = api.getAllTeamMembersOfTeamByIdUsingGET(idTeam);

        // TODO: test validations
    }
    
    @Test
    public void testGetAllTeams_Nominal() throws Exception {
        List<TeamDTO> response = api.getAllTeamsUsingGET();

        // TODO: test validations
    }

    @Test
    public void testGetTeamById_Nominal() throws Exception {
        Integer idTeam = null;
        TeamDTO response = api.getTeamByIdUsingGET(idTeam);

        // TODO: test validations
    }
    
}
